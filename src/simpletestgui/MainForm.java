package simpletestgui;

import async.CommandRunner;
import async.RunCommand;
import async.ScanTestFiles;
import config.Config;
import io.ThinkUpTestsDirectory;
import io.SimpleTestFile;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JList;
import javax.swing.JProgressBar;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 * This is the main frame for the application. It contains all of the GUI elements and
 * event handlers.
 *
 * @author Sam Rose <samwho@lbak.co.uk>
 */
public class MainForm extends javax.swing.JFrame {
    private ThinkUpTestsDirectory testFiles = new ThinkUpTestsDirectory();
    private Thread runThread;
    private Config config = Config.getInstance();

    public JCheckBoxMenuItem getHideSuccessfulTests() {
        return hideSuccessfulTests;
    }

    public JButton getRunButton() {
        return runButton;
    }

    public JButton getCancelButton() {
        return cancelButton;
    }

    public JTextArea getTestOutput() {
        return testOutput;
    }

    public JProgressBar getProgressBar() {
        return progressBar;
    }

    public JList getTestFileList() {
        return testFileList;
    }

    /** Creates new form MainForm */
    public MainForm() {
        try {
            // Set System L&F
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (UnsupportedLookAndFeelException e) {
            System.err.println("Look and feel not supported: " + e.getMessage());
        } catch (ClassNotFoundException e) {
            System.err.println("Class not found: " + e.getMessage());
        } catch (InstantiationException e) {
            System.err.println("Instantiation error: " + e.getMessage());
        } catch (IllegalAccessException e) {
            System.err.println("Illegal access exception: " + e.getMessage());
        }

        // this method is for NetBeans to set up the GUI
        initComponents();

        // set the icon image to the ThinkUp logo
        this.setIconImage(Toolkit.getDefaultToolkit().getImage("src/assets/thinkup-logo.png"));

        // start the run thread running a scan for test files
        this.runThread = new Thread(new ScanTestFiles(this, testFiles));
        runThread.start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        testFileScrollPane = new javax.swing.JScrollPane();
        testFileList = new javax.swing.JList();
        methodListScrollPane = new javax.swing.JScrollPane();
        methodList = new javax.swing.JList();
        runButton = new javax.swing.JButton();
        outputScrollPane = new javax.swing.JScrollPane();
        testOutput = new javax.swing.JTextArea();
        cancelButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        menuBar = new javax.swing.JMenuBar();
        debugMenu = new javax.swing.JMenu();
        debugCheckBox = new javax.swing.JCheckBoxMenuItem();
        outputMenu = new javax.swing.JMenu();
        hideSuccessfulTests = new javax.swing.JCheckBoxMenuItem();
        autoRunMenu = new javax.swing.JMenu();
        autoRunEnabled = new javax.swing.JCheckBoxMenuItem();
        autoRunAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ThinkUp Test Runner");

        testFileList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        testFileList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                testFileListValueChanged(evt);
            }
        });
        testFileScrollPane.setViewportView(testFileList);

        methodList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                methodListValueChanged(evt);
            }
        });
        methodList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                methodListKeyPressed(evt);
            }
        });
        methodListScrollPane.setViewportView(methodList);

        runButton.setText("Run");
        runButton.setEnabled(false);
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        testOutput.setColumns(20);
        testOutput.setEditable(false);
        testOutput.setLineWrap(true);
        testOutput.setRows(5);
        outputScrollPane.setViewportView(testOutput);

        cancelButton.setText("Cancel");
        cancelButton.setEnabled(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outputScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(runButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                            .addComponent(testFileScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                            .addComponent(methodListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE))))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(testFileScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(methodListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(runButton)
                    .addComponent(cancelButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );

        debugMenu.setText("Debug");

        debugCheckBox.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        debugCheckBox.setText("Enabled");
        debugCheckBox.setToolTipText("Toggle the display of debug messages in test output.");
        debugMenu.add(debugCheckBox);

        menuBar.add(debugMenu);

        outputMenu.setText("Output");

        hideSuccessfulTests.setSelected(true);
        hideSuccessfulTests.setText("Hide successful tests");
        hideSuccessfulTests.setToolTipText("Enabling this will hide tests with no failures from the test output.");
        outputMenu.add(hideSuccessfulTests);

        menuBar.add(outputMenu);

        autoRunMenu.setText("Auto-run");
        autoRunMenu.setEnabled(false);

        autoRunEnabled.setText("Enabled");
        autoRunMenu.add(autoRunEnabled);

        autoRunAbout.setText("About...");
        autoRunMenu.add(autoRunAbout);

        menuBar.add(autoRunMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void methodListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_methodListValueChanged
    }//GEN-LAST:event_methodListValueChanged

    private void testFileListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_testFileListValueChanged
        SimpleTestFile file = (SimpleTestFile) testFileList.getSelectedValue();

        methodList.setListData(file.getMethods().toArray());
    }//GEN-LAST:event_testFileListValueChanged

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        this.runSelectedTests();
    }//GEN-LAST:event_runButtonActionPerformed

    /**
     * This method runs the tests that are selected in the list
     * boxes on this form.
     */
    public void runSelectedTests() {
        SimpleTestFile file = (SimpleTestFile) testFileList.getSelectedValue();
        ArrayList<String[]> env = new ArrayList<String[]>();

        // generate environment variables for each test
        Object[] objectArray = methodList.getSelectedValues();
        for (int i = 0; i < objectArray.length; i++) {
            String[] envA;
            if (!debugCheckBox.getState()) {
                envA = new String[2];
                envA[0] = "TEST_METHOD=" + (String) objectArray[i];
                envA[1] = "TEST_GUI=1";
            } else {
                envA = new String[3];
                envA[0] = "TEST_METHOD=" + (String) objectArray[i];
                envA[1] = "TEST_GUI=1";
                envA[2] = "TEST_DEBUG=1";
            }
            env.add(envA);
        }

        // truncate function if no methods are selected
        if (objectArray.length == 0) {
            testOutput.setText("No methods selected.");
            return;
        }

        // generate arrays of commands and environment variables ready to send to CommandRunner
        ArrayList<RunCommand> commands = new ArrayList<RunCommand>();
        Iterator<String[]> envIter = env.iterator();

        while (envIter.hasNext()) {
            if (System.getProperty("os.name").contains("Windows")) {
                commands.add(new RunCommand(this, "\"" + config.getValue("php_dir") + 
                    "php\" \"" + file.getFile().getAbsolutePath() + "\"", envIter.next()));
            }
            else {
                commands.add(new RunCommand(this, config.getValue("php_dir") + 
                    "php " + file.getFile().getAbsolutePath(), envIter.next()));
            }
        }

        // empty test output box ready for new tests
        testOutput.setText("");

        // create and run a thread running a CommandRunner
        runThread = new Thread(new CommandRunner(this, commands));
        runThread.start();

        this.cancelButton.setEnabled(true);
    }

    /**
     * If tests are currently running, this method will stop them safely.
     */
    public void cancelRunningTests() {
        if (runThread != null) {
            if (runThread.isAlive()) {
                CommandRunner.stop();
                this.cancelButton.setEnabled(false);
            }
        }
    }

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.cancelRunningTests();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void methodListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_methodListKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            this.runButtonActionPerformed(null);
        }
    }//GEN-LAST:event_methodListKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem autoRunAbout;
    private javax.swing.JCheckBoxMenuItem autoRunEnabled;
    private javax.swing.JMenu autoRunMenu;
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBoxMenuItem debugCheckBox;
    private javax.swing.JMenu debugMenu;
    private javax.swing.JCheckBoxMenuItem hideSuccessfulTests;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JList methodList;
    private javax.swing.JScrollPane methodListScrollPane;
    private javax.swing.JMenu outputMenu;
    private javax.swing.JScrollPane outputScrollPane;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton runButton;
    private javax.swing.JList testFileList;
    private javax.swing.JScrollPane testFileScrollPane;
    private javax.swing.JTextArea testOutput;
    // End of variables declaration//GEN-END:variables
}
